#!/bin/sh
#Copyright (C) 2021 TinyTools

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

title=""
subtitle=""
tags=""
note=""

create_note()
{
    path=$(dirname "$note")
    note_name=$(basename "$note")
    note_name_md=${note_name%.*}.md

    [ -z "$title" ] && title="$note_name"
    [ -d "$path" ] || mkdir "$path"

    echo "---" > "$path/$note_name_md"
    printf "title: \"%s\"\nsubtitle: \"%s\"\ndate: \"%s\"\ntags: [%s]\n\n" \
        "$title" "$subtitle" "$(date +"%F %H:%M:%S")" "$tags" >> "$path/$note_name_md"
    echo "---" >> "$path/$note_name_md"

    if [ -n "$title" ]; then
        printf "\n# %s" "$title" >> "$path/$note_name_md"
    else
        printf "\n# %s" "$note_name" >> "$path/$note_name_md"
    fi

    echo "$note_name_md created!"
}

usage()
{
    echo "usage: tnotes {OPTIONS}"
    echo "e.g: tnotes --new ~/Notes/example"
    echo "options:"
    echo "'-n', '--new' '<path>': create a new note to the path informed, it creates a folder if it does not exists;"
    echo "'-t', '--title' '<title>': add title to note metadata;"
    echo "'-s', '--subtitle' '<subtitle>': add subtitle to note metadata;"
    echo "'--tags' '<tags>' add tags to note metadata;"
    echo "'-l', '--list' '<path>': list notes on a given path;"
    echo "'-o', '--open' '<path>': open note from a given path;"
    echo "'-m', '--mv' '<name>' '<new name>': rename note file withe the name informed as argument;"
    echo "'-r', '--rm' '<name>': deletes a note with the title received as argument on the path informed with '--path';"
    exit 0
}

parse_new_note_argument()
{
    if [ -n "$1" ]; then
        note="$1"
    else
        echo "\"--new\" option expects an argument."
        exit 1
    fi
}

parse_title_argument()
{
    [ -n "$1" ] && title="$1"
}

parse_subtitle_argument()
{
    [ -n "$1" ] && subtitle="$1"
}

parse_tags_argument()
{
    [ -n "$1" ] && tags="$1"
}

move()
{
    echo "$2 $3"
}

parse_arguments()
{
    echo "parse_arguments"
}

arguments="$*"
if [ -z "$arguments" ]; then
    usage
else
    progname="$(basename "$0")"
    OPTS=$(getopt -o "hn:t:s:l:o:m:r:" --long "help,new:,title:,subtitle:,list:,open:,move:,remove:,tags:" -n "$progname" -- "$@")
    eval set -- "$OPTS"

    while true; do
        case "$1" in
            -h | --help ) usage; exit; ;;
            -n | --new ) parse_new_note_argument "$2"; shift 2 ;;
            -t | --title ) parse_title_argument "$2"; shift 2 ;;
            -s | --subtitle ) parse_subtitle_argument "$2"; shift 2;;
            --tags ) parse_tags_argument "$2"; shift 2;;
            -l | --list )
                if [ -z "$2" ]; then
                    exit 1
                fi
                find "$2" -name "*.md" -o -name "*.txt"
                exit 0
                shift
                ;;
            -o | --open )
                if [ -n "$2" ]; then
                    xdg-open "$2"
                    exit 0
                else
                    exit 1
                fi
                shift
                ;;
            -m | --move )
                if [ -n "$2" ] && [ -n "$3" ]; then
                    mv "$2" "$3"
                    exit 0
                else
                    exit 1
                fi
                shift
                ;;
            -r | --remove )
                if [ -n "$2" ]; then
                    rm "$2"
                    exit 0
                else
                    exit 1
                fi
                shift
                ;;
            -- ) shift; break ;;
            * ) break ;;
        esac
    done
fi


if [ -f "${note%.*}.md" ]; then
    echo "\"${note%.*}.md\" already exists!"
    exit 1
elif [ -n "$note" ]; then
    create_note
    exit 0
else
    echo "Unexpected error!"
    exit 1
fi
