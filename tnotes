#!/bin/bash
#Copyright (C) 2021 TinyTools

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

note_metadata="title: %s\nsubtitle: %s\ndate: %s\ntags: [%s]\n\n"
title=""
subtitle=""
tags=""
note=""
action=""
verbose=0

create_note()
{
    [ $verbose = 1 ] && echo "creating note..."
    path=$(dirname $note)
    note_name=$(basename $note)
    note_name_md=${note_name%.*}.md

    [ -f "$note_name_md" ] && [ $verbose = 1 ] && echo "note already exists!" && exit 1
    [ -d "$path" ] || mkdir "$path"

    echo "---" > "$path/$note_name_md"
    printf "$note_metadata" "$title" "$subtitle" "$(date +"%F %H:%M:%S")" "$tags" >> "$path/$note_name_md"
    echo "---" >> "$path/$note_name_md"

    if [ ! -z "$title" ]; then
        echo -e "\n# $title" >> "$path/$note_name_md"
    else
        echo -e "\n# $note_name" >> "$path/$note_name_md"
    fi

    [ $verbose = 1 ] && echo "$note_name_md created!"
}

usage()
{
    echo "usage:"
    exit 0
}

parse_new_note_argument()
{
    if [ ! -z "$1" ]; then
        note="$1"
        shift;
    else
        echo "\"--new\" options expects an argument."
        exit 1
    fi
}

parse_title_argument()
{
    [ ! -z "$1" ] && title="$1";
}

parse_subtitle_argument()
{
    [ ! -z "$1" ] && subtitle="$1"
}

parse_tags_argument()
{
    [ ! -z "$1" ] && tags="$1"
}

parse_arguments()
{
    # https://stackoverflow.com/a/31443098
    # https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash#13359121
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -n | --new | new )
                parse_new_note_argument "$2";
                shift
                ;;
            -t=* | --title=* | title=* )
                parse_title_argument "${1#*=}"
                shift
                ;;
            -s=* | --subtitle=* | subtitle=* )
                parse_subtitle_argument "${1#*=}"
                shift
                ;;
            --tags=* | tags=* )
                parse_tags_argument "${1#*=}"
                shift
                ;;
            -t | --title | title )
                parse_title_argument "$2"
                shift
                shift
                ;;
            -s | --subtitle | subtitle )
                parse_title_argument "$2"
                shift
                shift
                ;;
            --tags | tags )
                parse_tags_argument "$2"
                shift
                shift
                ;;
            -l | --list | list)
                if [ -z "$2" ]; then
                    exit -1
                fi
                find "$2" -name "*.md" -o -name "*.txt"
                shift
                ;;
            -o | --open | open)
                if [ ! -z "$2" ]; then
                    xdg-open "$2"
                    exit 0
                fi
                shift
                ;;
            -h | --help | help)
                usage;
                shift
                ;;
            -v | --verbose)
                verbose=1
                shift
                ;;
            -*)
                echo "unknown option: $1" >&2;
                exit 1
                ;;
            *)
                PARAMS="$PARAMS $1";
                shift
                ;;
        esac
    done
}

arguments="$@"
[ -z "$arguments" ] && usage || parse_arguments "$@"

if [ $verbose = 1 ]; then
    echo "Nome do arquivo: $note"
    echo "Título: $title"
    echo "Subtítulo: $subtitle"
    echo "Data: $(date +"%F %H:%M:%S")"
    echo "Tags: $tags"
fi

if [ -z "$note" ]; then
    [ $verbose = 1 ] && echo "deve informar um path"
    exit 1
elif [ -f "${note%.*}.md" ]; then
    [ $verbose = 1 ] && echo "nota já existe"
    exit 1
else
    create_note
    exit 0
fi
