#!/bin/sh
#Copyright (C) 2021 TinyTools

#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, version 3 of the License.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

note_metadata="title: \"%s\"\nsubtitle: \"%s\"\ndate: \"%s\"\ntags: [%s]\n\n"
title=""
subtitle=""
tags=""
note=""
action=""

create_note()
{
    path=$(dirname "$note")
    note_name=$(basename "$note")
    note_name_md=${note_name%.*}.md

    [ -z "$title" ] && title="$note_name"
    [ -d "$path" ] || mkdir "$path"

    echo "---" > "$path/$note_name_md"
    printf "$note_metadata" "$title" "$subtitle" "$(date +"%F %H:%M:%S")" "$tags" >> "$path/$note_name_md"
    echo "---" >> "$path/$note_name_md"

    if [ ! -z "$title" ]; then
        echo "\n# $title" >> "$path/$note_name_md"
    else
        echo "\n# $note_name" >> "$path/$note_name_md"
    fi

    echo "$note_name_md created!"
}

usage()
{
    echo "usage: tnotes {OPTIONS}"
    echo "e.g: tnotes --new ~/Notes/example"
    echo "options:"
    echo "'-n', '--new', 'new' '<path>': create a new note to the path informed, it creates a folder if it does not exists;"
    echo "'-t', '--title', 'title' '<title>': add title to note metadata;"
    echo "'-s', '--subtitle', 'subtitle' '<subtitle>': add subtitle to note metadata;"
    echo "'--tags', 'tags' '<tags>' add tags to note metadata;"
    echo "'-l', '--list', 'list' '<path>': list notes on a given path;"
    echo "'-o', '--open', 'open' '<path>': open note from a given path;"
    echo "'-m', '--mv', 'mv' '<name>' '<new name>': rename note file withe the name informed as argument;"
    echo "'-r', '--rm' 'rm' '<name>': deletes a note with the title received as argument on the path informed with '--path';"
    exit 0
}

parse_new_note_argument()
{
    if [ ! -z "$1" ]; then
        note="$1"
        shift;
    else
        echo "\"--new\" option expects an argument."
        exit 1
    fi
}

parse_title_argument()
{
    [ ! -z "$1" ] && title="$1";
}

parse_subtitle_argument()
{
    [ ! -z "$1" ] && subtitle="$1"
}

parse_tags_argument()
{
    [ ! -z "$1" ] && tags="$1"
}

parse_arguments()
{
    # https://stackoverflow.com/a/31443098
    # https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash#13359121
    while [ "$#" -gt 0 ]; do
        case "$1" in
            -n | --new | new )
                parse_new_note_argument "$2";
                shift
                ;;
            -t=* | --title=* | title=* )
                parse_title_argument "${1#*=}"
                shift
                ;;
            -s=* | --subtitle=* | subtitle=* )
                parse_subtitle_argument "${1#*=}"
                shift
                ;;
            --tags=* | tags=* )
                parse_tags_argument "${1#*=}"
                shift
                ;;
            -t | --title | title )
                parse_title_argument "$2"
                shift
                shift
                ;;
            -s | --subtitle | subtitle )
                parse_subtitle_argument "$2"
                shift
                shift
                ;;
            --tags | tags )
                parse_tags_argument "$2"
                shift
                shift
                ;;
            -l | --list | list)
                if [ -z "$2" ]; then
                    exit -1
                fi
                find "$2" -name "*.md" -o -name "*.txt"
                exit 0
                shift
                ;;
            -o | --open | open)
                if [ ! -z "$2" ]; then
                    xdg-open "$2"
                    exit 0
                fi
                shift
                ;;
            -r | --rm | rm)
                if [ ! -z "$2" ]; then
                    rm "$2"
                    exit 0
                fi
                shift
                ;;
            -m | --mv | mv)
                if [ ! -z "$2" ]; then
                    mv "$2" "$3"
                    exit 0
                fi
                shift
                ;;
            -h | --help | help)
                usage;
                shift
                ;;
            -*)
                echo "unknown option: $1" >&2;
                exit 1
                ;;
            *)
                PARAMS="$PARAMS $1";
                shift
                ;;
        esac
    done
}

arguments="$@"
[ -z "$arguments" ] && usage || parse_arguments "$@"

if [ -f "${note%.*}.md" ]; then
    echo "\"${note%.*}.md\" already exists!"
    exit 1
else
    create_note
    exit 0
fi
